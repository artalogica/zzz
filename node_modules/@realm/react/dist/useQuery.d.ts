import Realm from "realm";
type RealmClassType<T = any> = {
    new (...args: any): T;
};
type QueryCallback<T> = (collection: Realm.Results<T>) => Realm.Results<T>;
type DependencyList = ReadonlyArray<unknown>;
/**
 * Generates the `useQuery` hook from a given `useRealm` hook.
 * @param useRealm - Hook that returns an open Realm instance
 * @returns useObject - Hook that is used to gain access to a {@link Realm.Collection}
 */
export declare function createUseQuery(useRealm: () => Realm): {
    <T>(type: string, query?: QueryCallback<T> | undefined, deps?: DependencyList): Realm.Results<T & Realm.Object<T>>;
    <T_1 extends Realm.Object<any>>(type: RealmClassType<T_1>, query?: QueryCallback<T_1> | undefined, deps?: DependencyList): Realm.Results<T_1>;
};
export {};
//# sourceMappingURL=useQuery.d.ts.map