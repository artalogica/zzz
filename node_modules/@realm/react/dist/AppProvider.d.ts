import React from "react";
import Realm from "realm";
/**
 * Props for the AppProvider component. These replicate the options which
 * can be used to create a Realm.App instance:
 * https://www.mongodb.com/docs/realm-sdks/js/latest/Realm.App.html#~AppConfiguration
 */
type AppProviderProps = Realm.AppConfiguration & {
    /**
     * A ref to the App instance. This is useful if you need to access the App
     * instance outside of a component that uses the App hooks.
     */
    appRef?: React.MutableRefObject<Realm.App | null>;
    children: React.ReactNode;
};
/**
 * React component providing a Realm App instance on the context for the
 * sync hooks to use. An `AppProvider` is required for an app to use the hooks.
 * @param appProps - The {@link Realm.AppConfiguration} for app services, passed as props.
 * @param appRef - A ref to the app instance, which can be used to access the app instance outside of the React component tree.
 */
export declare const AppProvider: React.FC<AppProviderProps>;
/**
 * Hook to access the current {@link Realm.App} from the {@link AppProvider} context.
 * @throws if an AppProvider does not exist in the componentâ€™s ancestors
 */
export declare const useApp: <FunctionsFactoryType extends Realm.DefaultFunctionsFactory, CustomDataType extends Record<string, unknown>>() => Realm.App<FunctionsFactoryType, CustomDataType>;
export declare const useAuthResult: () => [import("./types").OperationResult, React.Dispatch<React.SetStateAction<import("./types").OperationResult>>];
export {};
//# sourceMappingURL=AppProvider.d.ts.map